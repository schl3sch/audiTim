[
    {
        "id": "6761cd81a24d274a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6eb1bac4457d8171",
        "type": "mqtt in",
        "z": "6761cd81a24d274a",
        "name": "MQTT-Node",
        "topic": "dhbw/ai/si2023/5/max4466/0",
        "qos": "2",
        "datatype": "json",
        "broker": "18d3dd12ac8f58c2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "caa9d18689140a85",
                "da662d9248c57a75"
            ]
        ]
    },
    {
        "id": "caa9d18689140a85",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function 1",
        "func": "const data = msg.payload;\n\nmsg.payload = {\n    bucket: 'DB',\n    precision: 'ms',\n    token: '123456789',\n    method: 'POST',\n    data: []\n};\n\nconst baseTimestamp = Number(data.timestamp) * 1000; // convert to ms\nconst baseSequence = data.sequence;\nconst values = data.value;\n\nfor (let i = 0; i < 10; i++) {\n    const indexSensor1 = i;\n    const indexSensor2 = 10 + i;\n    const indexSensor3 = 20 + i;\n    const indexSensor4 = 30 + i;\n    const reading1 = Number(values[indexSensor1]);\n    const reading2 = Number(values[indexSensor2]);\n    const reading3 = Number(values[indexSensor3]);\n    const reading4 = Number(values[indexSensor4]);\n\n    msg.payload.data.push({\n        measurement: 'sensor_data',\n        fields: {\n            sensor_1: reading1,\n            sensor_2: reading2,\n            sensor_3: reading3,\n            sensor_4: reading4\n        },\n\n        timestamp: baseTimestamp + (i * 100) + 7200,\n    });\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "257fd1e076dbb753"
            ]
        ]
    },
    {
        "id": "e86b8df27f37b702",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "Virtual MQTT message",
        "func": "// Sequence counter\ncontext.sequence = (context.sequence || 0) + 1;\nlet timestamp = Math.floor(Date.now() / 1000);\nlet value = Array.from({ length: 40 }, () => Math.floor(Math.random() * 1500));\n\n// Construct the simulated message payload\nmsg.payload = {\n    timestamp: timestamp,\n    value: value,\n    sequence: context.sequence,\n    meta: \"null\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "da662d9248c57a75",
                "caa9d18689140a85"
            ]
        ]
    },
    {
        "id": "8e065df14c632f75",
        "type": "inject",
        "z": "6761cd81a24d274a",
        "name": "Virtual MQTT trigger",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "e86b8df27f37b702"
            ]
        ]
    },
    {
        "id": "af428bb866f14fb8",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "257fd1e076dbb753",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "6761cd81a24d274a",
        "server": "ebd9cdaa089e58f8",
        "name": "InfluxDB",
        "x": 760,
        "y": 160,
        "wires": [
            [
                "af428bb866f14fb8"
            ]
        ]
    },
    {
        "id": "da662d9248c57a75",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function 2",
        "func": "const data = msg.payload;\n\nmsg.payload = {\n    bucket: 'DB',\n    precision: 'ms',\n    token: '123456789',\n    method: 'POST',\n    data: []\n};\n\n// -----------------------------------------\n// Einstellbare Parameter\nconst peakStrengthFactor = 1.5; // z.B. 1.0 = normal, 2.0 = doppelt so stark wie der Maximalwert\nconst idwFlatteningPower = 2.0; // z.B. 2.0 = Standard, 1.2 = abgeflacht, 4.0 = steiler\nconst gridSize = 10;\n// -----------------------------------------\n\nconst baseTimestamp = Number(data.timestamp) * 1000; // convert to ms\nconst baseSequence = data.sequence;\nconst values = data.value;\nlet heatmapArr = new Uint8Array(100);\nconst sensorValues = {};\n\n// No loop for better readability\nsensorValues[0] = Number(values[0]);\nsensorValues[1] = Number(values[10]);\nsensorValues[2] = Number(values[20]);\nsensorValues[3] = Number(values[30]);\n\nconst sensorPositions = {\n    0: { x: 0, y: 0 },\n    1: { x: 1, y: 0 },\n    2: { x: 0, y: 1 },\n    3: { x: 1, y: 1 },\n};\n\n// WCL Peak-Bestimmung\nconst epsilon = 0.0001;\nlet sumWeightedX = 0;\nlet sumWeightedY = 0;\nlet sumWeights = 0;\n\nfor (const [key, value] of Object.entries(sensorValues)) {\n    const pos = sensorPositions[key];\n    const weight = value;\n    sumWeightedX += weight * pos.x;\n    sumWeightedY += weight * pos.y;\n    sumWeights += weight;\n}\n\nconst peakX = sumWeightedX / (sumWeights || epsilon);\nconst peakY = sumWeightedY / (sumWeights || epsilon);\nconst peakValue = Math.max(...Object.values(sensorValues)) * peakStrengthFactor;\n\n// Interpolationspunkte inkl. virtuellem Peak\nconst interpolationPoints = [\n    ...Object.entries(sensorPositions).map(([key, pos]) => ({\n        x: pos.x,\n        y: pos.y,\n        value: sensorValues[key],\n    })),\n    { x: peakX, y: peakY, value: peakValue },\n];\n\n// IDW Interpolation\nlet arrIndex = 0;\nfor (let row = 0; row < gridSize; row++) {\n    const y = row / (gridSize - 1);\n\n    for (let col = 0; col < gridSize; col++) {\n        const x = col / (gridSize - 1);\n        let numerator = 0;\n        let denominator = 0;\n\n        for (const point of interpolationPoints) {\n            const dx = x - point.x;\n            const dy = y - point.y;\n            const distance = Math.sqrt(dx * dx + dy * dy) || epsilon;\n            const weight = 1 / Math.pow(distance, idwFlatteningPower);\n            numerator += point.value * weight;\n            denominator += weight;\n        }\n\n        const interpolatedValue = numerator / denominator;\n        const downscaledValue = Math.floor(interpolatedValue/32);\n        heatmapArr[arrIndex] = downscaledValue;\n        arrIndex++;\n    }\n}\n\nconst base64Data = Buffer.from(heatmapArr).toString('base64');\n\nmsg.payload.data.push({\n    measurement: 'heatmap_arr',\n    fields: {\n        base64: base64Data,\n        peakX: peakX,\n        peakY: peakY,\n        peakValue: peakValue\n    },\n    timestamp: baseTimestamp,\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "257fd1e076dbb753",
                "af428bb866f14fb8"
            ]
        ]
    },
    {
        "id": "bc4befc737eee3c1",
        "type": "status",
        "z": "6761cd81a24d274a",
        "name": "MqttStatus",
        "scope": [
            "6eb1bac4457d8171"
        ],
        "x": 140,
        "y": 280,
        "wires": [
            [
                "4a979a5c06079fcc"
            ]
        ]
    },
    {
        "id": "4a979a5c06079fcc",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function MqttStatus",
        "func": "let key = msg.status?.text || 'unknown';\nlet statusText = msg.status?.text || 'unknown';\nlet isError = statusText.startsWith('Error');\n\nlet payload = {\n    connected: key.endsWith('connected'),\n    error: isError ? msg.status?.text : null\n};\n\nflow.set('mqttStatus', payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a470365c5765bec0",
        "type": "status",
        "z": "6761cd81a24d274a",
        "name": "InfluxStatus",
        "scope": [
            "257fd1e076dbb753"
        ],
        "x": 130,
        "y": 320,
        "wires": [
            [
                "4a69905f95db3741"
            ]
        ]
    },
    {
        "id": "4a69905f95db3741",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function InfluxStatus",
        "func": "let statusText = msg.status?.text || 'unknown';\nlet isError = statusText.startsWith('Error');\n\nlet payload = {\n    connected: !isError,\n    error: isError ? msg.status?.text : null\n};\n\nflow.set('influxStatus', payload); \nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2b363a7e98f5a8e4",
        "type": "http in",
        "z": "6761cd81a24d274a",
        "name": "Http Endpoint",
        "url": "/api/nodered-status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "599011e327141c3a"
            ]
        ]
    },
    {
        "id": "599011e327141c3a",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "getFlowStatus",
        "func": "msg.payload = {\n    mqtt: flow.get('mqttStatus') || { connected: false, error: 'unknown' },\n    influx: flow.get('influxStatus') || { connected: false, error: 'unknown' }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "611bdb58d2952494",
                "af428bb866f14fb8"
            ]
        ]
    },
    {
        "id": "611bdb58d2952494",
        "type": "http response",
        "z": "6761cd81a24d274a",
        "name": "Response",
        "statusCode": "200",
        "headers": {},
        "x": 600,
        "y": 360,
        "wires": []
    },
    {
        "id": "18d3dd12ac8f58c2",
        "type": "mqtt-broker",
        "name": "HänischMqtt",
        "broker": "aicon.dhbw-heidenheim.de",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ebd9cdaa089e58f8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "AudiTim Influx",
        "host": "influxdb",
        "port": "8086",
        "tls": false
    }
]