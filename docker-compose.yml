services:
  backend:
    build:
      context: ./API
    container_name: backend
    depends_on:
      - postgresql
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - INFLUX_URL=${INFLUX_URL}
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - INFLUX_BUCKET=${INFLUX_BUCKET}
    networks:
      - sensor-net
    image: api:v1

  postgresql:
    image: postgres:14
    container_name: postgresql
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: auditim
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASS}
    volumes:
      - postgresql:/var/lib/postgresql/data

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    env_file:
      - .env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - TZ=Europe/Berlin
    networks:
      - sensor-net

  nodered:
    build:
      context: ./DB
    image: nodered:v1
    container_name: nodered
    ports:
      - "1880:1880"
    environment:
      - TZ=Europe/Berlin
    networks:
      - sensor-net
    depends_on:
      - influxdb

  frontend:
    build:
      context: ./Frontend
    image: frontend:v1
    depends_on:
      - postgresql
    container_name: frontendcontainer
    ports:
      - "8081:8081"
    expose:
      - "8081"
    networks:
      - sensor-net
    volumes:
      - ./Documentation/ProjektSe/dokumentation.pdf:/usr/share/nginx/html/assets/dokumentation.pdf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5

  alert-watcher:
    build:
      context: ./AlertWatcher
    image: alert-watcher:v1
    container_name: alert-watcher
    depends_on:
      - influxdb
    env_file:
      - .env
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - INFLUX_BUCKET=${INFLUX_BUCKET}
      - MEASUREMENT=sensor_data
      - FIELDS=sensor_1, sensor_2, sensor_3, sensor_4
      - THRESHOLD=0
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
      - INTERVAL_SEC=30
    volumes:
      - alert_state:/app/state
    restart: unless-stopped
    networks:
      - sensor-net
    
  e2e-tests:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.playwright
    container_name: e2e-tests
    depends_on:
      frontend:
        condition: service_healthy
    environment:
      - TEST_ENV=docker
    networks:
      - sensor-net
    restart: "no"

volumes:
  influxdb_data:
  nodered_data:
  alert_state:
  postgresql:

networks:
  sensor-net:
    external: true



